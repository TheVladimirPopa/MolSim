/*
 * Particle.cpp
 *
 *  Created on: 23.02.2010
 *      Author: eckhardw
 */

#include "Particle.h"

#include <iostream>
#include "utils/ArrayUtils.h"
#include <cmath>

Particle::Particle(int type_arg) {
  type = type_arg;
  std::cout << "Particle generated!" << std::endl;
  f = {0., 0., 0.};
  old_f = {0., 0., 0.};
}

Particle::Particle(const Particle &other) {
  x = other.x;
  v = other.v;
  f = other.f;
  old_f = other.old_f;
  m = other.m;
  type = other.type;
  std::cout << "Particle generated by copy!" << std::endl;
}

// Todo: maybe use initializater list instead of copy?
Particle::Particle(std::array<double, 3> x_arg, std::array<double, 3> v_arg,
                   double m_arg, int type_arg) {
  x = x_arg;
  v = v_arg;
  m = m_arg;
  type = type_arg;
  f = {0., 0., 0.};
  old_f = {0., 0., 0.};
  std::cout << "Particle generated!" << std::endl;
}

Particle::~Particle() { std::cout << "Particle destructed!" << std::endl; }

const std::array<double, 3> &Particle::getX() const { return x; }

const std::array<double, 3> &Particle::getV() const { return v; }

const std::array<double, 3> &Particle::getF() const { return f; }

const std::array<double, 3> &Particle::getOldF() const { return old_f; }

double Particle::getM() const { return m; }

int Particle::getType() const { return type; }

std::string Particle::toString() const {
  std::stringstream stream;
  stream << "Particle: X:" << x << " v: " << v << " f: " << f
         << " old_f: " << old_f << " type: " << type;
  return stream.str();
}

bool Particle::operator==(Particle &other) {
  return (x == other.x) and (v == other.v) and (f == other.f) and
         (type == other.type) and (m == other.m) and (old_f == other.old_f);
}

std::ostream &operator<<(std::ostream &stream, Particle &p) {
  stream << p.toString();
  return stream;
}

void Particle::updateLocation(double const& delta_t) {
    x[0] += v[0] * delta_t;
    x[1] += v[1] * delta_t;
    x[2] += v[2] * delta_t;
}

void Particle::resetForceIteration() {
    // todo: is this a value by value copy?
    old_f = f;
}

void Particle::addForce(Particle const& partner) {
    constexpr double grav_const = 1;

    // Calculate difference vector
    double a = partner.x[0] - x[0];
    double b = partner.x[1] - x[1];
    double c = partner.x[2] - x[2];

    // Add current particle force
    double distance_cube = std::pow(a*a + b*b + c*c, 1.5);

    f[0] += grav_const * ((partner.m * m) / distance_cube) * a;
    f[1] += grav_const * ((partner.m * m) / distance_cube) * b;
    f[2] += grav_const * ((partner.m * m) / distance_cube) * c;

    // Todo:
    // Newtons first law: the force from a upon b is the negative force from b upon a
}

void Particle::updateVelocity(double const& delta_t) {
    v[0] += (f[0] + old_f[0]) / (2 * m) * delta_t;
    v[1] += (f[1] + old_f[1]) / (2 * m) * delta_t;
    v[2] += (f[2] + old_f[2]) / (2 * m) * delta_t;
}








